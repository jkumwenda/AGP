# Generated by Django 2.2.7 on 2020-01-20 10:26

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('pk_courseid', models.AutoField(primary_key=True, serialize=False)),
                ('course', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'course',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DrawType',
            fields=[
                ('pk_draw_typeid', models.AutoField(primary_key=True, serialize=False)),
                ('draw_type', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'draw_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('pk_eventid', models.AutoField(primary_key=True, serialize=False)),
                ('event', models.CharField(max_length=500)),
                ('holes', models.IntegerField(blank=True, null=True)),
                ('event_description', models.TextField()),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'event',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventCourseType',
            fields=[
                ('pk_event_course_typeid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'event_course_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventFormat',
            fields=[
                ('pk_event_formatid', models.AutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'event_format',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='EventType',
            fields=[
                ('pk_event_typeid', models.AutoField(primary_key=True, serialize=False)),
                ('event_type', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'event_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Field',
            fields=[
                ('pk_fieldid', models.AutoField(primary_key=True, serialize=False)),
                ('field_type', models.CharField(max_length=3)),
            ],
            options={
                'db_table': 'field',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Format',
            fields=[
                ('pk_formatid', models.AutoField(primary_key=True, serialize=False)),
                ('format', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'format',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Information',
            fields=[
                ('pk_informationid', models.AutoField(primary_key=True, serialize=False)),
                ('info', models.TextField()),
            ],
            options={
                'db_table': 'information',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Register',
            fields=[
                ('pk_registerid', models.AutoField(primary_key=True, serialize=False)),
                ('reg_date', models.DateTimeField(blank=True, default=datetime.datetime.now)),
            ],
            options={
                'db_table': 'register',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RegistrationDate',
            fields=[
                ('pk_registration_dateid', models.AutoField(primary_key=True, serialize=False)),
                ('open_date', models.DateTimeField()),
                ('close_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'registration_date',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Slot',
            fields=[
                ('pk_slotid', models.AutoField(primary_key=True, serialize=False)),
                ('slot_time', models.TimeField()),
                ('day', models.IntegerField()),
            ],
            options={
                'db_table': 'slot',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SlotSize',
            fields=[
                ('pk_slot_sizeid', models.AutoField(primary_key=True, serialize=False)),
                ('slot_size', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'slot_size',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('pk_clubid', models.AutoField(primary_key=True, serialize=False)),
                ('club', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'club',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('pk_countryid', models.AutoField(primary_key=True, serialize=False)),
                ('country', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'country',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='CourseType',
            fields=[
                ('pk_course_typeid', models.AutoField(primary_key=True, serialize=False)),
                ('hand_index', models.CharField(blank=True, max_length=45, null=True)),
                ('course_handicap', models.CharField(blank=True, max_length=45, null=True)),
                ('status', models.IntegerField(blank=True, null=True)),
                ('fk_courseid', models.ForeignKey(db_column='fk_courseid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='types', to='backend.Course')),
            ],
            options={
                'db_table': 'course_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('pk_genderid', models.AutoField(primary_key=True, serialize=False)),
                ('gender', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'gender',
            },
        ),
        migrations.CreateModel(
            name='Hole',
            fields=[
                ('pk_holeid', models.AutoField(primary_key=True, serialize=False)),
                ('hole', models.IntegerField()),
            ],
            options={
                'db_table': 'hole',
            },
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('pk_permissionid', models.AutoField(primary_key=True, serialize=False)),
                ('permission', models.CharField(max_length=45)),
                ('code', models.CharField(max_length=20)),
                ('permission_desc', models.CharField(blank=True, max_length=45, null=True)),
            ],
            options={
                'db_table': 'permission',
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('pk_profileid', models.AutoField(primary_key=True, serialize=False)),
                ('dob', models.DateField(blank=True, null=True)),
                ('phone', models.CharField(max_length=45)),
                ('fk_genderid', models.ForeignKey(db_column='fk_genderid', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Gender')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'profile',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('pk_roleid', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(max_length=45)),
                ('role_desc', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
                ('pk_scoreid', models.AutoField(primary_key=True, serialize=False)),
                ('shots', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'score',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('pk_typeid', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=45)),
            ],
            options={
                'db_table': 'type',
            },
        ),
        migrations.CreateModel(
            name='RolePermission',
            fields=[
                ('pk_role_permissionid', models.AutoField(primary_key=True, serialize=False)),
                ('fk_permissionid', models.ForeignKey(db_column='fk_permissionid', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Permission')),
                ('fk_roleid', models.ForeignKey(db_column='fk_roleid', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Role')),
            ],
            options={
                'db_table': 'role_permission',
            },
        ),
        migrations.CreateModel(
            name='ProfileRole',
            fields=[
                ('pk_profile_roleid', models.AutoField(primary_key=True, serialize=False)),
                ('fk_profileid', models.ForeignKey(db_column='fk_profileid', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Profile')),
                ('fk_roleid', models.ForeignKey(db_column='fk_roleid', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Role')),
            ],
            options={
                'db_table': 'profile_role',
            },
        ),
        migrations.CreateModel(
            name='Handicap',
            fields=[
                ('pk_handicapid', models.AutoField(primary_key=True, serialize=False)),
                ('handicap_index', models.CharField(blank=True, max_length=45, null=True)),
                ('status', models.IntegerField()),
                ('date', models.DateField()),
                ('fk_profileid', models.ForeignKey(db_column='fk_profileid', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Profile')),
            ],
            options={
                'db_table': 'handicap',
            },
        ),
        migrations.CreateModel(
            name='CourseTypeHole',
            fields=[
                ('pk_course_type_holeid', models.AutoField(primary_key=True, serialize=False)),
                ('distance', models.IntegerField(blank=True, null=True)),
                ('par', models.IntegerField()),
                ('si', models.IntegerField(blank=True, null=True)),
                ('fk_course_typeid', models.ForeignKey(db_column='fk_course_typeid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='holes', to='backend.CourseType')),
                ('hole_pk_holeid', models.ForeignKey(db_column='hole_pk_holeid', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Hole')),
            ],
            options={
                'db_table': 'course_type_hole',
            },
        ),
        migrations.AddField(
            model_name='coursetype',
            name='fk_typeid',
            field=models.ForeignKey(db_column='fk_typeid', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Type'),
        ),
        migrations.CreateModel(
            name='ClubProfile',
            fields=[
                ('pk_club_profileid', models.AutoField(primary_key=True, serialize=False)),
                ('fk_clubid', models.ForeignKey(db_column='fk_clubid', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Club')),
                ('fk_profileid', models.ForeignKey(db_column='fk_profileid', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Profile')),
            ],
            options={
                'db_table': 'club_profile',
            },
        ),
        migrations.CreateModel(
            name='ClubCourse',
            fields=[
                ('pk_club_courseid', models.AutoField(primary_key=True, serialize=False)),
                ('fk_clubid', models.ForeignKey(db_column='fk_clubid', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Club')),
                ('fk_courseid', models.ForeignKey(db_column='fk_courseid', on_delete=django.db.models.deletion.DO_NOTHING, to='backend.Course')),
            ],
            options={
                'db_table': 'club_course',
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('pk_ratingid', models.AutoField(primary_key=True, serialize=False)),
                ('course_rating', models.CharField(max_length=45)),
                ('sloppy_rating', models.CharField(max_length=45)),
                ('par', models.CharField(blank=True, max_length=45, null=True)),
                ('fk_courseid', models.ForeignKey(db_column='fk_courseid', on_delete=django.db.models.deletion.DO_NOTHING, related_name='rating', to='backend.Course')),
            ],
            options={
                'db_table': 'rating',
                'unique_together': {('pk_ratingid', 'fk_courseid')},
            },
        ),
    ]
